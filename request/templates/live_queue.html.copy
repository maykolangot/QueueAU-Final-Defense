{% load static %}

<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <title>QueueAU Live Queue Monitor</title>
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet">
  <style>
    :root {
      --primary-color: #1c2d5a; /* Navy blue tone from your logo */
      --accent-color: #198038;
      --light-bg: #f4f9ff;
    }

    body {
      background-color: var(--light-bg);
      color: #1f2937;
      font-family: 'Segoe UI', sans-serif;
      margin: 0;
      padding: 0;
    }

    header {
      display: flex;
      justify-content: space-between;
      align-items: center;
      padding: 0.5rem 1rem;
      background-color: #ffffff;
      border-bottom: 2px solid #e0e0e0;
    }

    #date-time {
      font-weight: 700;
      color: var(--primary-color);
      font-size: 1.50rem;
    }

    #logo {
      height: 60px;
    }

    h2 {
      font-weight: bold;
      color: var(--primary-color);
      text-align: center;
      margin: 1.5rem 0;
    }

    .queue-card {
      background: #ffffff;
      margin-bottom: 2rem;
      padding: 2rem;
      border-radius: 1.25rem;
      border-left: 8px solid var(--primary-color);
      box-shadow: 0 4px 12px rgba(0,0,0,0.1);
      position: relative;
      overflow: hidden;
      transition: transform 0.3s ease;
    }

    .queue-card:hover {
      transform: translateY(-5px);
    }

    .queue-header {
      font-size: 1.3rem;
      font-weight: 600;
      color: var(--accent-color);
      text-align: center;
      margin-bottom: 1rem;
    }

    .queue-number {
      font-size: 4rem;
      font-weight: 800;
      text-align: center;
      color: var(--primary-color);
      text-shadow: 0 0 5px #cfd9ea;
      animation: pulse 1.5s infinite;
    }

    @keyframes pulse {
      0%, 100% {
        text-shadow: 0 0 10px #d0e2ff, 0 0 20px #d0e2ff;
      }
      50% {
        text-shadow: 0 0 20px #84a9ff, 0 0 30px #84a9ff;
      }
    }

    .badge-status {
      font-size: 1rem;
      padding: 0.5em 1em;
      font-weight: 500;
      border-radius: 50rem;
      background-color: #f1c21b;
      color: #000;
      margin-top: 0.5rem;
      display: inline-block;
    }

    #last-updated {
      font-size: 0.95rem;
      color: #6c757d;
      text-align: center;
      margin-top: 2rem;
    }

    footer {
      position: fixed;
      bottom: 0;
      width: 100%;
      background-color: var(--primary-color);
      color: white;
      padding: 0.3rem 0;
    }

    marquee {
      font-weight: 600;
      font-size: 1rem;
    }

    @media (max-width: 576px) {
      .queue-number {
        font-size: 3rem;
      }
      .queue-header {
        font-size: 1.1rem;
      }
      #logo {
        height: 45px;
      }
      #date-time {
        font-size: 1rem;
      }
    }
  </style>
</head>
<body>

  <!-- Header with date/time and logo -->
  <header>
    <div id="date-time">Loading time...</div>

    <img id="logo" src="https://www.phinma.edu.ph/wp-content/uploads/2024/04/2020-PHINMA-AU-Seal-1000x1000.png" alt="PHINMA AU Logo">
  </header>

  <h2>QueueAU Live Queue Monitor</h2>

  <div class="container pb-5 pt-3">
    <div class="row">
      <!-- Left Sidebar: Upcoming Queues (1/4 width) -->
      <div class="col-md-3">
        <!-- Priority Queue -->
        <div class="mb-4">
          <h5 class="text-danger fw-bold">Priority Queue</h5>
          <ul id="priority-queue" class="list-group small"></ul>
        </div>

        <!-- Standard Queue -->
        <div class="mb-4">
          <h5 class="text-primary fw-bold">Standard Queue</h5>
          <ul id="standard-queue" class="list-group small"></ul>
        </div>

        <!-- On Hold Queue -->
        <div>
          <h5 class="text-warning fw-bold">On-Hold Queue</h5>
          <ul id="on-hold-queue" class="list-group small"></ul>
        </div>
      </div>

      <!-- Right Main Area: In-Process Queues (3/4 width) -->
      <div class="col-md-9">
        <h4 class="text-center mb-3">Now Serving</h4>
        <div id="queue-container" class="row g-4 justify-content-center">
          <!-- Dynamic queue cards will populate here -->
        </div>

        <!-- Last Updated Timestamp -->
        <div id="last-updated" class="text-center mt-4 text-muted small"></div>
      </div>
    </div>
  </div>

  <!-- Marquee Footer -->
  <footer>
    <marquee behavior="scroll" direction="left" scrollamount="5">
    Please ready your payment when your number is called. | Queue updates every second. | Thank you for using QueueAU!
    </marquee>
  </footer>

  <!-- JavaScript for date/time and queue -->
<script>
    let announcedSet = new Set();

    function speakAnnouncement(queueNumber, windowNumber) {
      const msg = new SpeechSynthesisUtterance(`Now serving queue number ${queueNumber} at window number ${windowNumber}`);
      msg.rate = 1;
      msg.pitch = 1;
      speechSynthesis.speak(msg);
    }

    function fetchLiveQueue() {
      fetch("/live-queue/")
        .then(response => response.json())
        .then(data => {
          const container = document.getElementById("queue-container");
          container.innerHTML = "";

          if (data.length === 0) {
            container.innerHTML = `<div class="text-center text-muted">No queues currently in process.</div>`;
            return;
          }

          data.forEach(item => {
            const col = document.createElement("div");
            col.className = "col-md-6 col-lg-4";

            const card = document.createElement("div");
            card.className = "queue-card";

            const formattedStatus = item.status.replace("_", " ").toUpperCase();

            card.innerHTML = `
              <div class="queue-header">Window ${item.window}</div>
              <div class="queue-number">${item.queue_number}</div>
              <div class="text-center">
                <span class="badge-status">${formattedStatus}</span>
              </div>
            `;

            col.appendChild(card);
            container.appendChild(col);

            const uniqueKey = `${item.queue_number}|${item.window}`;
            if (!announcedSet.has(uniqueKey)) {
              announcedSet.add(uniqueKey);
              speakAnnouncement(item.queue_number, item.window);
            }
          });

          const now = new Date();
          const timeString = now.toLocaleTimeString();
          const dateString = now.toLocaleDateString();
          document.getElementById("last-updated").textContent = "Last updated: " + timeString;
        })
        .catch(err => {
          console.error("Error fetching live queue:", err);
        });
    }

    setInterval(fetchLiveQueue, 1000);
    fetchLiveQueue();

    function updateDateTime() {
    const now = new Date();

    const optionsDate = { year: 'numeric', month: 'long', day: 'numeric' };
    const dateString = now.toLocaleDateString('en-US', optionsDate);

    const optionsDay = { weekday: 'long' };
    const dayString = now.toLocaleDateString('en-US', optionsDay);

    const optionsTime = { hour: 'numeric', minute: 'numeric', second: 'numeric', hour12: true };
    const timeString = now.toLocaleTimeString('en-US', optionsTime);

    document.getElementById("date-time").textContent = `${dateString} | ${dayString} | ${timeString}`;
}

// Run once immediately
updateDateTime();

// Optional: update every second
setInterval(updateDateTime, 1000);
</script>


<script>
function fetchPublicQueues() {
  fetch("/public-next-queues/")
    .then(response => response.json())
    .then(data => {
      const priorityList = document.getElementById("priority-queue");
      const standardList = document.getElementById("standard-queue");
      const onHoldList = document.getElementById("on-hold-queue");

      priorityList.innerHTML = "";
      standardList.innerHTML = "";
      onHoldList.innerHTML = "";

      const renderQueue = (listElement, dataList, labelClass, emptyText) => {
        if (dataList.length === 0) {
          listElement.innerHTML = `<li class='list-group-item text-muted'>${emptyText}</li>`;
        } else {
          dataList.forEach(txn => {
            const li = document.createElement("li");
            li.className = "list-group-item d-flex justify-content-between align-items-center";
            li.innerHTML = `<span>#${txn.queue_number}</span><span class="badge ${labelClass}">${txn.created_at}</span>`;
            listElement.appendChild(li);
          });
        }
      };

      renderQueue(priorityList, data.priority, "bg-danger", "No priority queue.");
      renderQueue(standardList, data.standard, "bg-primary", "No standard queue.");
      renderQueue(onHoldList, data.on_hold, "bg-warning text-dark", "No on-hold queue.");
    })
    .catch(err => {
      console.error("Error fetching public queues:", err);
    });
}

setInterval(fetchPublicQueues, 3000);
fetchPublicQueues();
</script>

</body>
</html>
